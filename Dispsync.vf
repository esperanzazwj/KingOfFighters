////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : Dispsync.vf
// /___/   /\     Timestamp : 12/27/2015 00:22:14
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3 -verilog C:/Users/Administrator/Desktop/Course_Project/Dispsync.vf -w C:/Users/Administrator/Desktop/Course_Project/Dispsync.sch
//Design Name: Dispsync
//Device: spartan3
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Mux4to1_MUSER_Dispsync(I0, 
                              I1, 
                              I2, 
                              I3, 
                              s, 
                              o);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] s;
   output o;
   
   wire XLXN_17;
   wire XLXN_20;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   
   AND2  XLXI_1 (.I0(XLXN_20), 
                .I1(XLXN_17), 
                .O(XLXN_26));
   AND2  XLXI_2 (.I0(s[0]), 
                .I1(XLXN_17), 
                .O(XLXN_27));
   AND2  XLXI_3 (.I0(s[1]), 
                .I1(XLXN_20), 
                .O(XLXN_28));
   AND2  XLXI_4 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_29));
   AND2  XLXI_5 (.I0(I0), 
                .I1(XLXN_26), 
                .O(XLXN_30));
   AND2  XLXI_6 (.I0(I1), 
                .I1(XLXN_27), 
                .O(XLXN_31));
   AND2  XLXI_7 (.I0(I2), 
                .I1(XLXN_28), 
                .O(XLXN_32));
   AND2  XLXI_8 (.I0(I3), 
                .I1(XLXN_29), 
                .O(XLXN_33));
   INV  XLXI_9 (.I(s[1]), 
               .O(XLXN_17));
   INV  XLXI_10 (.I(s[0]), 
                .O(XLXN_20));
   OR4  XLXI_11 (.I0(XLXN_33), 
                .I1(XLXN_32), 
                .I2(XLXN_31), 
                .I3(XLXN_30), 
                .O(o));
endmodule
`timescale 1ns / 1ps

module Dispsync(Hexs, 
                LES, 
                point, 
                Scan, 
                AN, 
                Hex, 
                LE, 
                p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [3:0] Hex;
   output LE;
   output p;
   
   wire [3:0] XLXN_21;
   wire [3:0] XLXN_22;
   wire [3:0] XLXN_23;
   wire [3:0] XLXN_24;
   
   assign XLXN_21 = 4'hE;
   assign XLXN_22 = 4'hD;
   assign XLXN_23 = 4'hB;
   assign XLXN_24 = 4'h7;
   Mux441  XLXI_3 (.num1(Hexs[3:0]), 
                  .num2(Hexs[7:4]), 
                  .num3(Hexs[11:8]), 
                  .num4(Hexs[15:12]), 
                  .sel(Scan[1:0]), 
                  .num(Hex[3:0]));
   Mux441  XLXI_4 (.num1(XLXN_21[3:0]), 
                  .num2(XLXN_22[3:0]), 
                  .num3(XLXN_23[3:0]), 
                  .num4(XLXN_24[3:0]), 
                  .sel(Scan[1:0]), 
                  .num(AN[3:0]));
   Mux4to1_MUSER_Dispsync  XLXI_5 (.I0(point[0]), 
                                  .I1(point[1]), 
                                  .I2(point[2]), 
                                  .I3(point[3]), 
                                  .s(Scan[1:0]), 
                                  .o(p));
   Mux4to1_MUSER_Dispsync  XLXI_6 (.I0(LES[0]), 
                                  .I1(LES[1]), 
                                  .I2(LES[2]), 
                                  .I3(LES[3]), 
                                  .s(Scan[1:0]), 
                                  .o(LE));
endmodule
